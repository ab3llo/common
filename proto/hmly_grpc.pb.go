// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/hmly.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HouseholdService_CreateHousehold_FullMethodName = "/api.HouseholdService/CreateHousehold"
	HouseholdService_GetHousehold_FullMethodName    = "/api.HouseholdService/GetHousehold"
	HouseholdService_GetHouseholds_FullMethodName   = "/api.HouseholdService/GetHouseholds"
	HouseholdService_UpdateHousehold_FullMethodName = "/api.HouseholdService/UpdateHousehold"
	HouseholdService_DeleteHousehold_FullMethodName = "/api.HouseholdService/DeleteHousehold"
)

// HouseholdServiceClient is the client API for HouseholdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HouseholdServiceClient interface {
	CreateHousehold(ctx context.Context, in *CreateHouseholdRequest, opts ...grpc.CallOption) (*HouseholdResponse, error)
	GetHousehold(ctx context.Context, in *GetHouseholdRequest, opts ...grpc.CallOption) (*HouseholdResponse, error)
	GetHouseholds(ctx context.Context, in *GetHouseHoldsRequest, opts ...grpc.CallOption) (*HouseholdsResponse, error)
	UpdateHousehold(ctx context.Context, in *UpdateHouseholdRequest, opts ...grpc.CallOption) (*HouseholdResponse, error)
	DeleteHousehold(ctx context.Context, in *GetHouseholdRequest, opts ...grpc.CallOption) (*HouseholdResponse, error)
}

type householdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHouseholdServiceClient(cc grpc.ClientConnInterface) HouseholdServiceClient {
	return &householdServiceClient{cc}
}

func (c *householdServiceClient) CreateHousehold(ctx context.Context, in *CreateHouseholdRequest, opts ...grpc.CallOption) (*HouseholdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseholdResponse)
	err := c.cc.Invoke(ctx, HouseholdService_CreateHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *householdServiceClient) GetHousehold(ctx context.Context, in *GetHouseholdRequest, opts ...grpc.CallOption) (*HouseholdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseholdResponse)
	err := c.cc.Invoke(ctx, HouseholdService_GetHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *householdServiceClient) GetHouseholds(ctx context.Context, in *GetHouseHoldsRequest, opts ...grpc.CallOption) (*HouseholdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseholdsResponse)
	err := c.cc.Invoke(ctx, HouseholdService_GetHouseholds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *householdServiceClient) UpdateHousehold(ctx context.Context, in *UpdateHouseholdRequest, opts ...grpc.CallOption) (*HouseholdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseholdResponse)
	err := c.cc.Invoke(ctx, HouseholdService_UpdateHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *householdServiceClient) DeleteHousehold(ctx context.Context, in *GetHouseholdRequest, opts ...grpc.CallOption) (*HouseholdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HouseholdResponse)
	err := c.cc.Invoke(ctx, HouseholdService_DeleteHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HouseholdServiceServer is the server API for HouseholdService service.
// All implementations must embed UnimplementedHouseholdServiceServer
// for forward compatibility.
type HouseholdServiceServer interface {
	CreateHousehold(context.Context, *CreateHouseholdRequest) (*HouseholdResponse, error)
	GetHousehold(context.Context, *GetHouseholdRequest) (*HouseholdResponse, error)
	GetHouseholds(context.Context, *GetHouseHoldsRequest) (*HouseholdsResponse, error)
	UpdateHousehold(context.Context, *UpdateHouseholdRequest) (*HouseholdResponse, error)
	DeleteHousehold(context.Context, *GetHouseholdRequest) (*HouseholdResponse, error)
	mustEmbedUnimplementedHouseholdServiceServer()
}

// UnimplementedHouseholdServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHouseholdServiceServer struct{}

func (UnimplementedHouseholdServiceServer) CreateHousehold(context.Context, *CreateHouseholdRequest) (*HouseholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHousehold not implemented")
}
func (UnimplementedHouseholdServiceServer) GetHousehold(context.Context, *GetHouseholdRequest) (*HouseholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHousehold not implemented")
}
func (UnimplementedHouseholdServiceServer) GetHouseholds(context.Context, *GetHouseHoldsRequest) (*HouseholdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHouseholds not implemented")
}
func (UnimplementedHouseholdServiceServer) UpdateHousehold(context.Context, *UpdateHouseholdRequest) (*HouseholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHousehold not implemented")
}
func (UnimplementedHouseholdServiceServer) DeleteHousehold(context.Context, *GetHouseholdRequest) (*HouseholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHousehold not implemented")
}
func (UnimplementedHouseholdServiceServer) mustEmbedUnimplementedHouseholdServiceServer() {}
func (UnimplementedHouseholdServiceServer) testEmbeddedByValue()                          {}

// UnsafeHouseholdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HouseholdServiceServer will
// result in compilation errors.
type UnsafeHouseholdServiceServer interface {
	mustEmbedUnimplementedHouseholdServiceServer()
}

func RegisterHouseholdServiceServer(s grpc.ServiceRegistrar, srv HouseholdServiceServer) {
	// If the following call pancis, it indicates UnimplementedHouseholdServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HouseholdService_ServiceDesc, srv)
}

func _HouseholdService_CreateHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseholdServiceServer).CreateHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseholdService_CreateHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseholdServiceServer).CreateHousehold(ctx, req.(*CreateHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseholdService_GetHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseholdServiceServer).GetHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseholdService_GetHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseholdServiceServer).GetHousehold(ctx, req.(*GetHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseholdService_GetHouseholds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHouseHoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseholdServiceServer).GetHouseholds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseholdService_GetHouseholds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseholdServiceServer).GetHouseholds(ctx, req.(*GetHouseHoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseholdService_UpdateHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseholdServiceServer).UpdateHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseholdService_UpdateHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseholdServiceServer).UpdateHousehold(ctx, req.(*UpdateHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HouseholdService_DeleteHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HouseholdServiceServer).DeleteHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HouseholdService_DeleteHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HouseholdServiceServer).DeleteHousehold(ctx, req.(*GetHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HouseholdService_ServiceDesc is the grpc.ServiceDesc for HouseholdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HouseholdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.HouseholdService",
	HandlerType: (*HouseholdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHousehold",
			Handler:    _HouseholdService_CreateHousehold_Handler,
		},
		{
			MethodName: "GetHousehold",
			Handler:    _HouseholdService_GetHousehold_Handler,
		},
		{
			MethodName: "GetHouseholds",
			Handler:    _HouseholdService_GetHouseholds_Handler,
		},
		{
			MethodName: "UpdateHousehold",
			Handler:    _HouseholdService_UpdateHousehold_Handler,
		},
		{
			MethodName: "DeleteHousehold",
			Handler:    _HouseholdService_DeleteHousehold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hmly.proto",
}
